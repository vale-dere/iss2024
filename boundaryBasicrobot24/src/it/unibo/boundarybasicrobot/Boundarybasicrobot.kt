/* Generated by AN DISI Unibo */ 
package it.unibo.boundarybasicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Boundarybasicrobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var OWNER = "$name"; 
				var STEPSDONE=0;
				var N = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name request engage")
						request("engage", "engage($OWNER,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleEngageDone",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="handleEngageRefused",cond=whenReply("engagerefused"))
				}	 
				state("handleEngageDone") { //this:State
					action { //it:State
						CommUtils.outgreen("engage $name done")
						delay(100) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="handleStepFailed",cond=whenReply("stepfailed"))
				}	 
				state("handleEngageRefused") { //this:State
					action { //it:State
						CommUtils.outblack("engage $name refused")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleStepDone") { //this:State
					action { //it:State
						
						    		STEPSDONE += 1; 
						delay(100) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t05",targetState="handleStepFailed",cond=whenReply("stepfailed"))
				}	 
				state("handleStepFailed") { //this:State
					action { //it:State
						 N = N + 1  
						if(  N == 1  
						 ){forward("setdirection", "dir(right)" ,"basicrobot" ) 
						}
						if(  N == 2  
						 ){forward("setdirection", "dir(up)" ,"basicrobot" ) 
						}
						if(  N == 3  
						 ){forward("setdirection", "dir(left)" ,"basicrobot" ) 
						}
						delay(500) 
						if(  N == 4  
						 ){CommUtils.outgreen("boundary done")
						CommUtils.outblue("the perimeter is $STEPSDONE long")
						 System.exit(0)  
						}
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t07",targetState="handleStepFailed",cond=whenReply("stepfailed"))
				}	 
			}
		}
} 
